package furniture_sale_ordering_management_system;

import static furniture_sale_ordering_management_system.Choose_Product.userID;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import table.TableCustom;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author yuw18
 */
public class Choose_Product extends javax.swing.JFrame {

    public double totalPrice = 0.0;
    public static String userID;
    public static String selectedProduct;  // Make static
    public static String itemID;
    public static String price;
    public List<String> selectedProducts = new ArrayList<>();
    public List<String> selectedItemIDs = new ArrayList<>();
    public List<String> selectedPrices = new ArrayList<>();
    public static String Amount;

    /**
     * Creates new form Choose_Product1
     *
     * @param userID
     */
    public Choose_Product(String userID) {
        this.userID = userID;
        initComponents();
        List<String> furnitureNames = readFurnitureNamesFromCSV();
        jComboBox_product.setModel(new DefaultComboBoxModel<>(furnitureNames.toArray(new String[0])));
        
        getContentPane().setBackground(Color.WHITE);
        TableCustom.apply(jScrollPane3, TableCustom.TableType.MULTI_LINE);


        jTable_product.getTableHeader().setFont(new Font("", Font.BOLD, 15));
        jTable_product.setFont(new Font("", Font.BOLD, 10));
    }

    private List<String> readFurnitureNamesFromCSV() {
        List<String> furnitureNames = new ArrayList<>();

        String csvFile = "Data/Yoyo-Furniture.csv";
        String line;

        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            while ((line = br.readLine()) != null) {
                // Assuming that the furniture name is in the first column
                String[] data = line.split(",");
                if (data.length > 0) {
                    furnitureNames.add(data[0].trim());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception as needed (e.g., logging, showing an error message)
        }

        return furnitureNames;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_product = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_totalamount = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_product = new javax.swing.JTable();
        button_delete = new furniture_sale_ordering_management_system.progressindicator.Button();
        button_Proceed = new furniture_sale_ordering_management_system.progressindicator.Button();
        button_add = new furniture_sale_ordering_management_system.progressindicator.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 650));
        setSize(new java.awt.Dimension(1050, 680));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(238, 240, 218));
        jPanel1.setPreferredSize(new java.awt.Dimension(1050, 680));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Product :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, -1, 30));

        jComboBox_product.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(jComboBox_product, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 130, 380, 30));

        jTextArea_totalamount.setEditable(false);
        jTextArea_totalamount.setColumns(20);
        jTextArea_totalamount.setRows(5);
        jScrollPane2.setViewportView(jTextArea_totalamount);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 260, -1, 260));

        jTable_product.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Name", "Price", "Category", "Short Description", "Designer", "Height", "Width"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable_product);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 255, 770, 275));

        button_delete.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        button_delete.setText("Delete");
        button_delete.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteActionPerformed(evt);
            }
        });
        jPanel1.add(button_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, 80, 30));

        button_Proceed.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        button_Proceed.setText("Proceed");
        button_Proceed.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        button_Proceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ProceedActionPerformed(evt);
            }
        });
        jPanel1.add(button_Proceed, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 550, 80, 30));

        button_add.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        button_add.setText("Add");
        button_add.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });
        jPanel1.add(button_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 190, 80, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private String extractAmount(String input) {
        // Assuming the amount is always after "RM" in the text
        String rmPrefix = "RM";
        int rmIndex = input.indexOf(rmPrefix);
        if (rmIndex != -1) {
            // Find the next occurrence of "\n" or use the length of the string
            int endIndex = input.indexOf("\n", rmIndex);
            if (endIndex == -1) {
                endIndex = input.length();
            }
            return input.substring(rmIndex, endIndex).trim();
        } else {
            // If "RM" is not found, you may need additional logic based on your actual data format
            return input.trim();
        }
    }    private String getSafeValue(List<String> dataList, int index) {
        return (index >= 0 && index < dataList.size()) ? dataList.get(index).trim() : "";
    }
    private void button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deleteActionPerformed
       deleteSelectedRows();
    }//GEN-LAST:event_button_deleteActionPerformed

    private void button_ProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ProceedActionPerformed
        int[] selectedRows = jTable_product.getSelectedRows();

        if (selectedRows.length > 0) {
            for (int selectedRow : selectedRows) {
                itemID = jTable_product.getValueAt(selectedRow, 0).toString();
                selectedProduct = jTable_product.getValueAt(selectedRow, 1).toString();
                price = jTable_product.getValueAt(selectedRow, 2).toString();

                // Add the selected product and item ID to the lists
                selectedProducts.add(selectedProduct);
                selectedItemIDs.add(itemID);
                selectedPrices.add(price);
            }

            // Extract total amount details from jTextArea_totalamount
            String totalAmountDetails = jTextArea_totalamount.getText();

            // Extract the amount from totalAmountDetails
            String amount = extractAmount(totalAmountDetails);

            // Create an instance of CreateSalesOrderQuotation
            CreateSalesOrderQuotation create_sales_order_quotation = new CreateSalesOrderQuotation(userID, selectedProducts, selectedItemIDs, selectedPrices, amount);

            // Pass the data to CreateSalesOrderQuotation
            create_sales_order_quotation.setInitialValues(selectedProducts, selectedItemIDs, selectedPrices, amount);

            // Make CreateSalesOrderQuotation visible
            create_sales_order_quotation.setVisible(true);

            // Close the current window
            dispose();
        } else {
            // No row selected, display an error message or perform appropriate handling
            JOptionPane.showMessageDialog(this, "Please add a product before proceeding.");
        }
    }//GEN-LAST:event_button_ProceedActionPerformed

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
   String selectedProduct = (String) jComboBox_product.getSelectedItem();

        // Read additional data (item ID, category, and price) based on the selected product
        String csvFile = "Data/Yoyo-Furniture.csv";
        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                StringTokenizer tokenizer = new StringTokenizer(line, ",");
                List<String> dataList = new ArrayList<>();

                while (tokenizer.hasMoreTokens()) {
                    dataList.add(tokenizer.nextToken());
                }

                if (!dataList.isEmpty() && dataList.get(0).trim().equals(selectedProduct)) {
                    // Assuming item ID is in the second column, category in the third, and price in the fourth
                    String itemID = getSafeValue(dataList, 1);
                    String priceStr = getSafeValue(dataList, 2);
                    String category = getSafeValue(dataList, 3);
                    String shortDescription = getSafeValue(dataList, 4);
                    String designer = getSafeValue(dataList, 5);
                    String height = getSafeValue(dataList, 6);
                    String width = getSafeValue(dataList, 7);

                    // Convert price to double and add it to the total
                    double price = Double.parseDouble(priceStr);
                    totalPrice += price;

                    // Append additional data to jTable_product
                    DefaultTableModel model = (DefaultTableModel) jTable_product.getModel();
                    model.addRow(new Object[]{itemID, selectedProduct, "RM" + price, category, shortDescription, designer, height, width});

                    // Update the total amount in jTextArea_totalamount
                    jTextArea_totalamount.setText("Total Price: RM" + totalPrice + "\n");

                    break; // No need to continue reading once the data is found
                }
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
            // Handle the exception as needed (e.g., logging, showing an error message)
        }

        // Optionally, you can clear the selection in the jComboBox_product
        jComboBox_product.setSelectedIndex(-1);
    }//GEN-LAST:event_button_addActionPerformed
    private void deleteSelectedRows() {
        DefaultTableModel model = (DefaultTableModel) jTable_product.getModel();
        int[] selectedRows = jTable_product.getSelectedRows();

        // Delete rows in reverse order to avoid issues with indices
        for (int i = selectedRows.length - 1; i >= 0; i--) {
            model.removeRow(selectedRows[i]);
        }

        // Recalculate the total price based on the remaining rows
        totalPrice = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            String priceStr = model.getValueAt(i, 2).toString().replace("RM", "").trim();
            double price = Double.parseDouble(priceStr);
            totalPrice += price;
        }

        // Update the total amount in jTextArea_totalamount
        jTextArea_totalamount.setText("Total Price: RM" + totalPrice + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Choose_Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Choose_Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Choose_Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Choose_Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Choose_Product chooseproduct = new Choose_Product(userID);
                chooseproduct.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private furniture_sale_ordering_management_system.progressindicator.Button button_Proceed;
    private furniture_sale_ordering_management_system.progressindicator.Button button_add;
    private furniture_sale_ordering_management_system.progressindicator.Button button_delete;
    private javax.swing.JComboBox<String> jComboBox_product;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_product;
    private javax.swing.JTextArea jTextArea_totalamount;
    // End of variables declaration//GEN-END:variables
}
