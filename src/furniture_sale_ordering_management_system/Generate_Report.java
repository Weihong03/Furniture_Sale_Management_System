/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package furniture_sale_ordering_management_system;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Workstation
 */
public class Generate_Report extends javax.swing.JFrame {

    /**
     * Creates new form Generate_Report
     */
    public Generate_Report() {
        initComponents();
        // Set the title of the window
        setTitle("Report Generation");

        // Get the dimension of the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        // Calculate the center coordinates
        int centerX = (screenSize.width - getWidth()) / 2;
        int centerY = (screenSize.height - getHeight()) / 2;

        // Set the location of the window
        setLocation(centerX, centerY);

        // Set the default close operation
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Sales = new javax.swing.JTable();
        jComboBox_Salesperson = new javax.swing.JComboBox<>();
        jComboBox_Confirmation = new javax.swing.JComboBox<>();
        jComboBox_Status = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton_Confirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Report Generation");

        jTable_Sales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable_Sales);

        jComboBox_Confirmation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Approved", "Rejected" }));

        jComboBox_Status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "In Progress", "Closed Sale" }));

        jLabel2.setText("Salesperson:");

        jLabel3.setText("Confirmation:");

        jLabel4.setText("Status:");

        jButton_Confirm.setText("Confirm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox_Salesperson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox_Confirmation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox_Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_Confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Confirm)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_Salesperson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_Confirmation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Method to refresh the Salesperson JComboBox
    private void refreshSalespersonComboBox() {
        // Assuming jComboBox_Salesperson is the name of your JComboBox
        jComboBox_Salesperson.removeAllItems(); // Clear existing items

        // Read Sales_Quotation.txt and extract Salesperson names
        Set<String> salespersons = readSalespersonsFromFile("Data/Sales_Quotation.txt");

        // Update the JComboBox with Salesperson names
        for (String salesperson : salespersons) {
            jComboBox_Salesperson.addItem(salesperson);
        }
    }

    // Method to read Salesperson names from Sales_Quotation.txt
    private Set<String> readSalespersonsFromFile(String filePath) {
        Set<String> salespersons = new HashSet<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith("Salesperson:")) {
                    // Extract Salesperson name from the line and remove trailing comma if it exists
                    String salesperson = line.substring("Salesperson:".length()).trim().replaceAll(",$", "");
                    salespersons.add(salesperson);
                }
            }
        } catch (IOException e) {
            e.printStackTrace(); // Handle the exception according to your needs
        }

        return salespersons;
    }

private void loadDataFromFile() {
    String filePath = "Data/Sales_Quotation.txt";

    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        DefaultTableModel model = (DefaultTableModel) jTable_Sales.getModel();
        String[] colHeaders = {"ID", "Amount", "Date", "Product", "Price", "Salesperson", "Confirmation", "Status"};
        model.setColumnIdentifiers(colHeaders);

        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("ID:")) {
                // Extracting ID with proper checks
                String id = extractValue(line, "ID");

                // Read lines for amount, date, and product directly
                String amount = extractValue(reader.readLine(), "Amount");
                String date = extractValue(reader.readLine(), "Date");
                String product = extractValue(reader.readLine(), "Product");

                // Skip unnecessary lines
                skipLines(reader, 3);

                // Read lines for price directly
                String price = extractValue(reader.readLine(), "Price");

                // Skip unnecessary lines
                skipLines(reader, 3);

                // Read lines for salesperson and confirmation directly
                String salesperson = extractValue(reader.readLine(), "Salesperson");
                String confirmation = extractValue(reader.readLine(), "Confirmation");

                // Skip unnecessary lines
                skipLines(reader, 3);

                // Read the line for status directly
                String status = extractValue(reader.readLine(), "Status");

                model.addRow(new Object[]{id, amount, date, product, price, salesperson, confirmation, status});
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Failed to load sales data from file.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Helper method for extracting values with proper checks
private String extractValue(String line, String field) {
    if (line == null) {
        // Handle the case where the line is null
        // For example, log an error or show a message
        System.err.println("Line is null while extracting value for field " + field);
        return "";
    }

    int colonIndex = line.indexOf(":");
    if (colonIndex != -1) {
        return line.substring(colonIndex + 1).trim();
    } else {
        // Handle the case where the colon is not found in the line
        // For example, log an error or show a message
        System.err.println("Colon not found for field " + field + " in line: " + line);
        return "";
    }
}

// Helper method to skip a specified number of lines
private void skipLines(BufferedReader reader, int numberOfLines) throws IOException {
    for (int i = 0; i < numberOfLines; i++) {
        String line = reader.readLine();
        if (line == null) {
            // Handle the case where there are fewer lines than expected
            // For example, log an error or show a message
            System.err.println("Unexpected end of file while skipping lines.");
            break;
        }
    }
}


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generate_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generate_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generate_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generate_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Generate_Report generate = new Generate_Report();
                generate.setVisible(true);
                generate.refreshSalespersonComboBox();
                generate.loadDataFromFile();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Confirm;
    private javax.swing.JComboBox<String> jComboBox_Confirmation;
    private javax.swing.JComboBox<String> jComboBox_Salesperson;
    private javax.swing.JComboBox<String> jComboBox_Status;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Sales;
    // End of variables declaration//GEN-END:variables
}
